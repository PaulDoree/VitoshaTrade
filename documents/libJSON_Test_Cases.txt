#include <cstdlib>
#include <iostream>

#include "libjson/libjson.h"

using namespace std;

char message[] = "{\n\"numberOfExamples\":\"250\",\n\"time\": [\"1347349860\",\"1347349800\",\"1347349740\",\"1347349680\",\"1347349620\",\"1347349560\",\"1347349500\",\"1347349440\",\"1347349380\",\"1347349320\",\"1347349260\",\"1347349200\",\"1347349140\",\"1347349080\",\"1347349020\",\"1347348960\",\"1347348900\",\"1347348840\",\"1347348780\",\"1347348720\",\"1347348660\",\"1347348600\",\"1347348540\",\"1347348480\",\"1347348420\",\"1347348360\",\"1347348300\",\"1347348240\",\"1347348180\",\"1347348120\",\"1347348060\",\"1347348000\",\"1347347940\",\"1347347880\",\"1347347820\",\"1347347760\",\"1347347700\",\"1347347640\",\"1347347580\",\"1347347520\",\"1347347460\",\"1347347400\",\"1347347340\",\"1347347280\",\"1347347220\",\"1347347160\",\"1347347100\",\"1347347040\",\"1347346980\",\"1347346920\",\"1347346860\",\"1347346800\",\"1347346740\",\"1347346680\",\"1347346620\",\"1347346560\",\"1347346500\",\"1347346440\",\"1347346380\",\"1347346320\",\"1347346260\",\"1347346200\",\"1347346140\",\"1347346080\",\"1347346020\",\"1347345960\",\"1347345840\",\"1347345780\",\"1347345720\",\"1347345660\",\"1347345600\",\"1347345540\",\"1347345480\",\"1347345420\",\"1347345360\",\"1347345300\",\"1347345240\",\"1347345180\",\"1347345120\",\"1347345060\",\"1347345000\",\"1347344940\",\"1347344880\",\"1347344820\",\"1347344760\",\"1347344700\",\"1347344640\",\"1347344580\",\"1347344520\",\"1347344460\",\"1347344400\",\"1347344340\",\"1347344280\",\"1347344220\",\"1347344160\",\"1347344100\",\"1347344040\",\"1347343980\",\"1347343860\",\"1347343800\",\"1347343740\",\"1347343680\",\"1347343620\",\"1347343560\",\"1347343500\",\"1347343440\",\"1347343380\",\"1347343320\",\"1347343260\",\"1347343200\",\"1347343140\",\"1347343080\",\"1347343020\",\"1347342960\",\"1347342900\",\"1347342840\",\"1347342780\",\"1347342720\",\"1347342660\",\"1347342600\",\"1347342360\",\"1347342300\",\"1347342240\",\"1347342180\",\"1347342120\",\"1347342060\",\"1347342000\",\"1347341940\",\"1347341880\",\"1347341820\",\"1347341760\",\"1347341640\",\"1347341580\",\"1347341520\",\"1347341400\",\"1347341340\",\"1347340860\",\"1347340800\",\"1347340740\",\"1347340680\",\"1347340440\",\"1347340320\",\"1347340200\",\"1347340080\",\"1347339720\",\"1347339660\",\"1347339600\",\"1347339480\",\"1347338760\",\"1347338700\",\"1347338640\",\"1347338580\",\"1347338520\",\"1347338460\",\"1347338280\",\"1347337800\",\"1347337680\",\"1347337500\",\"1347337440\",\"1347337380\",\"1347337320\",\"1347337260\",\"1347337200\",\"1347337140\",\"1347337080\",\"1347337020\",\"1347336960\",\"1347336900\",\"1347336840\",\"1347336780\",\"1347336720\",\"1347336660\",\"1347336600\",\"1347336360\",\"1347336300\",\"1347336240\",\"1347336180\",\"1347336120\",\"1347336060\",\"1347336000\",\"1347335940\",\"1347335880\",\"1347335760\",\"1347335580\",\"1347335520\",\"1347335460\",\"1347335400\",\"1347335340\",\"1347335280\",\"1347335220\",\"1347335160\",\"1347335100\",\"1347335040\",\"1347334980\",\"1347334920\",\"1347334860\",\"1347334800\",\"1347334740\",\"1347334680\",\"1347334620\",\"1347334560\",\"1347334500\",\"1347334440\",\"1347334380\",\"1347334320\",\"1347334260\",\"1347334200\",\"1347334140\",\"1347334080\",\"1347333900\",\"1347333720\",\"1347333660\",\"1347333600\",\"1347333540\",\"1347333480\",\"1347333420\",\"1347333360\",\"1347333300\",\"1347333240\",\"1347333180\",\"1347333120\",\"1347333060\",\"1347333000\",\"1347332940\",\"1347332880\",\"1347332820\",\"1347332760\",\"1347332700\",\"1347332640\",\"1347332580\",\"1347332520\",\"1347332460\",\"1347332400\",\"1347332340\",\"1347332280\",\"1347332220\",\"1347332160\",\"1347332100\",\"1347332040\",\"1347331980\",\"1347331920\",\"1347331860\",\"1347331800\",\"1347331740\",\"1347331680\",\"1347331620\",\"1347331440\",\"1347331380\",\"1347331200\",\"1347331140\"],\n\"open\": [\"1.2791\",\"1.279\",\"1.2792\",\"1.2792\",\"1.2795\",\"1.2793\",\"1.2786\",\"1.2786\",\"1.2788\",\"1.2789\",\"1.279\",\"1.2784\",\"1.2785\",\"1.2784\",\"1.2786\",\"1.2782\",\"1.2782\",\"1.2781\",\"1.2782\",\"1.2776\",\"1.2772\",\"1.2767\",\"1.2765\",\"1.2762\",\"1.2763\",\"1.2761\",\"1.2762\",\"1.2759\",\"1.276\",\"1.2761\",\"1.2762\",\"1.2762\",\"1.2762\",\"1.2761\",\"1.2759\",\"1.2762\",\"1.2764\",\"1.2765\",\"1.2764\",\"1.2761\",\"1.2762\",\"1.2761\",\"1.2763\",\"1.2763\",\"1.2765\",\"1.2767\",\"1.2767\",\"1.2766\",\"1.2767\",\"1.2769\",\"1.2769\",\"1.2765\",\"1.2767\",\"1.2768\",\"1.2769\",\"1.2769\",\"1.2769\",\"1.2769\",\"1.2771\",\"1.2769\",\"1.2771\",\"1.2767\",\"1.2768\",\"1.2767\",\"1.2766\",\"1.2767\",\"1.2768\",\"1.2767\",\"1.2767\",\"1.2768\",\"1.2767\",\"1.2765\",\"1.2765\",\"1.2766\",\"1.2765\",\"1.2764\",\"1.2765\",\"1.2765\",\"1.2764\",\"1.2766\",\"1.2765\",\"1.2765\",\"1.2765\",\"1.2765\",\"1.2767\",\"1.2767\",\"1.2764\",\"1.2765\",\"1.2765\",\"1.2766\",\"1.2764\",\"1.2766\",\"1.2764\",\"1.2766\",\"1.2765\",\"1.2766\",\"1.2766\",\"1.2765\",\"1.2764\",\"1.2762\",\"1.2762\",\"1.2763\",\"1.2763\",\"1.2763\",\"1.2764\",\"1.2765\",\"1.2766\",\"1.2767\",\"1.2769\",\"1.277\",\"1.2769\",\"1.2771\",\"1.277\",\"1.2771\",\"1.2773\",\"1.2771\",\"1.2769\",\"1.2769\",\"1.2769\",\"1.277\",\"1.2772\",\"1.2771\",\"1.2771\",\"1.2771\",\"1.2769\",\"1.2771\",\"1.277\",\"1.277\",\"1.2773\",\"1.2772\",\"1.2771\",\"1.2773\",\"1.2774\",\"1.2773\",\"1.2774\",\"1.2775\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2776\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2776\",\"1.2775\",\"1.2775\",\"1.2776\",\"1.2775\",\"1.2775\",\"1.2773\",\"1.2774\",\"1.2775\",\"1.2776\",\"1.2777\",\"1.2779\",\"1.2778\",\"1.2777\",\"1.2779\",\"1.2777\",\"1.2777\",\"1.2775\",\"1.2777\",\"1.2775\",\"1.2776\",\"1.2775\",\"1.2774\",\"1.2774\",\"1.2774\",\"1.2776\",\"1.2775\",\"1.2776\",\"1.2777\",\"1.2776\",\"1.2778\",\"1.2778\",\"1.2778\",\"1.2778\",\"1.2777\",\"1.2778\",\"1.2776\",\"1.2776\",\"1.2777\",\"1.2775\",\"1.2778\",\"1.2776\",\"1.2784\",\"1.2786\",\"1.2788\",\"1.2788\",\"1.279\",\"1.2789\",\"1.2783\",\"1.2779\",\"1.2778\",\"1.2779\",\"1.2777\",\"1.2775\",\"1.2775\",\"1.2773\",\"1.2772\",\"1.277\",\"1.2771\",\"1.2772\",\"1.2771\",\"1.2772\",\"1.2772\",\"1.2773\",\"1.2774\",\"1.2774\",\"1.2774\",\"1.2774\",\"1.2773\",\"1.2772\",\"1.2772\",\"1.2772\",\"1.2772\",\"1.2773\",\"1.2772\",\"1.2772\",\"1.2771\",\"1.277\",\"1.2769\",\"1.277\",\"1.2768\",\"1.2769\",\"1.277\",\"1.2768\",\"1.2771\",\"1.2769\",\"1.277\",\"1.2768\",\"1.2768\",\"1.2766\",\"1.2766\",\"1.2765\",\"1.2766\",\"1.2767\",\"1.2768\",\"1.2766\",\"1.2766\",\"1.2766\",\"1.2767\",\"1.2767\",\"1.2766\",\"1.2765\",\"1.2766\",\"1.2764\",\"1.2763\"],\n\"low\": [\"1.279\",\"1.279\",\"1.279\",\"1.2791\",\"1.279\",\"1.2793\",\"1.2786\",\"1.2786\",\"1.2786\",\"1.2787\",\"1.2786\",\"1.2782\",\"1.2783\",\"1.2784\",\"1.2783\",\"1.2782\",\"1.278\",\"1.2781\",\"1.2777\",\"1.2774\",\"1.2772\",\"1.2765\",\"1.2765\",\"1.2762\",\"1.2762\",\"1.2761\",\"1.2761\",\"1.2759\",\"1.2759\",\"1.2761\",\"1.2762\",\"1.2761\",\"1.2762\",\"1.2761\",\"1.2759\",\"1.276\",\"1.2763\",\"1.2763\",\"1.2764\",\"1.2761\",\"1.2762\",\"1.2761\",\"1.2761\",\"1.2761\",\"1.2763\",\"1.2766\",\"1.2766\",\"1.2766\",\"1.2767\",\"1.2768\",\"1.2767\",\"1.2765\",\"1.2766\",\"1.2768\",\"1.2769\",\"1.2768\",\"1.2768\",\"1.2769\",\"1.2769\",\"1.2769\",\"1.2769\",\"1.2767\",\"1.2768\",\"1.2767\",\"1.2766\",\"1.2766\",\"1.2767\",\"1.2767\",\"1.2767\",\"1.2767\",\"1.2767\",\"1.2765\",\"1.2765\",\"1.2765\",\"1.2764\",\"1.2764\",\"1.2764\",\"1.2764\",\"1.2764\",\"1.2764\",\"1.2765\",\"1.2765\",\"1.2765\",\"1.2765\",\"1.2766\",\"1.2766\",\"1.2764\",\"1.2764\",\"1.2765\",\"1.2765\",\"1.2764\",\"1.2765\",\"1.2764\",\"1.2765\",\"1.2765\",\"1.2766\",\"1.2765\",\"1.2765\",\"1.2763\",\"1.2762\",\"1.2762\",\"1.2762\",\"1.2762\",\"1.2763\",\"1.2763\",\"1.2764\",\"1.2764\",\"1.2766\",\"1.2766\",\"1.2768\",\"1.2769\",\"1.277\",\"1.277\",\"1.2771\",\"1.2772\",\"1.277\",\"1.2769\",\"1.2769\",\"1.2769\",\"1.2769\",\"1.2771\",\"1.277\",\"1.277\",\"1.277\",\"1.2769\",\"1.277\",\"1.2769\",\"1.2768\",\"1.2771\",\"1.2772\",\"1.2771\",\"1.2772\",\"1.2773\",\"1.2773\",\"1.2774\",\"1.2773\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2776\",\"1.2774\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2773\",\"1.2772\",\"1.2775\",\"1.2776\",\"1.2776\",\"1.2778\",\"1.2778\",\"1.2777\",\"1.2778\",\"1.2777\",\"1.2777\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2776\",\"1.2775\",\"1.2774\",\"1.2774\",\"1.2774\",\"1.2775\",\"1.2775\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2775\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2783\",\"1.2787\",\"1.2787\",\"1.2788\",\"1.2788\",\"1.2783\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2775\",\"1.2774\",\"1.2773\",\"1.2771\",\"1.277\",\"1.2771\",\"1.2771\",\"1.2771\",\"1.2771\",\"1.2771\",\"1.2773\",\"1.2773\",\"1.2773\",\"1.2772\",\"1.2772\",\"1.2772\",\"1.277\",\"1.277\",\"1.2772\",\"1.2772\",\"1.2772\",\"1.2772\",\"1.2772\",\"1.2771\",\"1.277\",\"1.2768\",\"1.277\",\"1.2768\",\"1.2769\",\"1.2768\",\"1.2768\",\"1.2769\",\"1.2769\",\"1.2768\",\"1.2768\",\"1.2768\",\"1.2766\",\"1.2766\",\"1.2765\",\"1.2766\",\"1.2766\",\"1.2768\",\"1.2766\",\"1.2766\",\"1.2766\",\"1.2767\",\"1.2766\",\"1.2766\",\"1.2764\",\"1.2766\",\"1.2764\",\"1.2764\"],\n\"high\": [\"1.2792\",\"1.2793\",\"1.2792\",\"1.2793\",\"1.2795\",\"1.2798\",\"1.2792\",\"1.2787\",\"1.2788\",\"1.2789\",\"1.279\",\"1.2791\",\"1.2785\",\"1.2786\",\"1.2786\",\"1.2789\",\"1.2783\",\"1.2783\",\"1.2783\",\"1.2783\",\"1.2781\",\"1.2771\",\"1.2766\",\"1.2766\",\"1.2763\",\"1.2762\",\"1.2763\",\"1.2761\",\"1.2761\",\"1.2762\",\"1.2763\",\"1.2763\",\"1.2763\",\"1.2763\",\"1.2761\",\"1.2762\",\"1.2764\",\"1.2766\",\"1.2765\",\"1.2763\",\"1.2762\",\"1.2762\",\"1.2765\",\"1.2763\",\"1.2766\",\"1.2767\",\"1.2767\",\"1.2767\",\"1.2768\",\"1.2769\",\"1.2769\",\"1.277\",\"1.2768\",\"1.2768\",\"1.2769\",\"1.2769\",\"1.2769\",\"1.277\",\"1.2771\",\"1.277\",\"1.2771\",\"1.277\",\"1.2768\",\"1.2768\",\"1.2767\",\"1.2767\",\"1.2768\",\"1.2768\",\"1.2768\",\"1.2768\",\"1.2768\",\"1.2766\",\"1.2767\",\"1.2767\",\"1.2767\",\"1.2764\",\"1.2765\",\"1.2765\",\"1.2764\",\"1.2766\",\"1.2765\",\"1.2767\",\"1.2767\",\"1.2766\",\"1.2768\",\"1.2768\",\"1.2766\",\"1.2765\",\"1.2766\",\"1.2766\",\"1.2765\",\"1.2766\",\"1.2765\",\"1.2766\",\"1.2765\",\"1.2766\",\"1.2766\",\"1.2766\",\"1.2764\",\"1.2763\",\"1.2763\",\"1.2764\",\"1.2763\",\"1.2764\",\"1.2764\",\"1.2765\",\"1.2767\",\"1.2767\",\"1.2769\",\"1.277\",\"1.2769\",\"1.2771\",\"1.277\",\"1.2772\",\"1.2773\",\"1.2772\",\"1.2771\",\"1.277\",\"1.277\",\"1.2771\",\"1.2772\",\"1.2771\",\"1.2771\",\"1.2771\",\"1.277\",\"1.2771\",\"1.2771\",\"1.2771\",\"1.2773\",\"1.2772\",\"1.2772\",\"1.2773\",\"1.2774\",\"1.2773\",\"1.2774\",\"1.2775\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2775\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2775\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2775\",\"1.2774\",\"1.2774\",\"1.2775\",\"1.2776\",\"1.2777\",\"1.2779\",\"1.2778\",\"1.2777\",\"1.2779\",\"1.2778\",\"1.2778\",\"1.2776\",\"1.2777\",\"1.2776\",\"1.2776\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2776\",\"1.2775\",\"1.2776\",\"1.2778\",\"1.2777\",\"1.2778\",\"1.2778\",\"1.2778\",\"1.2779\",\"1.2779\",\"1.2778\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2778\",\"1.2778\",\"1.2784\",\"1.2787\",\"1.2788\",\"1.2789\",\"1.279\",\"1.2794\",\"1.279\",\"1.2785\",\"1.2778\",\"1.2779\",\"1.2779\",\"1.2776\",\"1.2776\",\"1.2774\",\"1.2772\",\"1.2771\",\"1.2772\",\"1.2773\",\"1.2773\",\"1.2773\",\"1.2773\",\"1.2775\",\"1.2774\",\"1.2774\",\"1.2774\",\"1.2774\",\"1.2774\",\"1.2773\",\"1.2773\",\"1.2773\",\"1.2773\",\"1.2773\",\"1.2773\",\"1.2773\",\"1.2771\",\"1.277\",\"1.277\",\"1.2771\",\"1.2769\",\"1.2769\",\"1.277\",\"1.277\",\"1.2771\",\"1.277\",\"1.277\",\"1.277\",\"1.2769\",\"1.2767\",\"1.2767\",\"1.2767\",\"1.2766\",\"1.2768\",\"1.2769\",\"1.2767\",\"1.2767\",\"1.2767\",\"1.2768\",\"1.2768\",\"1.2766\",\"1.2766\",\"1.2766\",\"1.2765\",\"1.2765\"],\n\"close\": [\"1.279\",\"1.2792\",\"1.2791\",\"1.2791\",\"1.2791\",\"1.2794\",\"1.2792\",\"1.2787\",\"1.2787\",\"1.2787\",\"1.2788\",\"1.2789\",\"1.2783\",\"1.2784\",\"1.2785\",\"1.2785\",\"1.2783\",\"1.2781\",\"1.2782\",\"1.2783\",\"1.2775\",\"1.2771\",\"1.2766\",\"1.2764\",\"1.2763\",\"1.2762\",\"1.2762\",\"1.2761\",\"1.276\",\"1.2761\",\"1.2762\",\"1.2761\",\"1.2763\",\"1.2761\",\"1.276\",\"1.276\",\"1.2763\",\"1.2763\",\"1.2764\",\"1.2763\",\"1.2762\",\"1.2761\",\"1.2762\",\"1.2762\",\"1.2764\",\"1.2766\",\"1.2766\",\"1.2766\",\"1.2767\",\"1.2768\",\"1.2768\",\"1.2768\",\"1.2766\",\"1.2768\",\"1.2769\",\"1.2768\",\"1.2768\",\"1.277\",\"1.277\",\"1.277\",\"1.277\",\"1.277\",\"1.2768\",\"1.2767\",\"1.2766\",\"1.2767\",\"1.2768\",\"1.2767\",\"1.2768\",\"1.2768\",\"1.2767\",\"1.2766\",\"1.2766\",\"1.2766\",\"1.2765\",\"1.2764\",\"1.2765\",\"1.2764\",\"1.2764\",\"1.2765\",\"1.2765\",\"1.2766\",\"1.2766\",\"1.2766\",\"1.2766\",\"1.2768\",\"1.2766\",\"1.2765\",\"1.2766\",\"1.2766\",\"1.2765\",\"1.2765\",\"1.2765\",\"1.2765\",\"1.2765\",\"1.2766\",\"1.2765\",\"1.2765\",\"1.2764\",\"1.2763\",\"1.2763\",\"1.2763\",\"1.2762\",\"1.2764\",\"1.2764\",\"1.2765\",\"1.2764\",\"1.2767\",\"1.2766\",\"1.2768\",\"1.2769\",\"1.277\",\"1.277\",\"1.2771\",\"1.2772\",\"1.2772\",\"1.277\",\"1.277\",\"1.277\",\"1.277\",\"1.2771\",\"1.2771\",\"1.277\",\"1.277\",\"1.277\",\"1.277\",\"1.277\",\"1.2769\",\"1.2771\",\"1.2772\",\"1.2771\",\"1.2772\",\"1.2774\",\"1.2773\",\"1.2774\",\"1.2773\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2775\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2775\",\"1.2776\",\"1.2776\",\"1.2775\",\"1.2775\",\"1.2774\",\"1.2774\",\"1.2775\",\"1.2776\",\"1.2777\",\"1.2778\",\"1.2778\",\"1.2777\",\"1.2778\",\"1.2778\",\"1.2778\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2776\",\"1.2775\",\"1.2774\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2775\",\"1.2776\",\"1.2777\",\"1.2776\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2779\",\"1.2778\",\"1.2777\",\"1.2777\",\"1.2777\",\"1.2776\",\"1.2776\",\"1.2777\",\"1.2777\",\"1.2783\",\"1.2787\",\"1.2787\",\"1.2789\",\"1.2791\",\"1.2788\",\"1.2784\",\"1.2778\",\"1.2777\",\"1.2778\",\"1.2776\",\"1.2776\",\"1.2774\",\"1.2772\",\"1.2771\",\"1.2771\",\"1.2772\",\"1.2773\",\"1.2772\",\"1.2773\",\"1.2773\",\"1.2774\",\"1.2773\",\"1.2773\",\"1.2773\",\"1.2773\",\"1.2772\",\"1.2771\",\"1.2773\",\"1.2773\",\"1.2773\",\"1.2772\",\"1.2773\",\"1.2771\",\"1.277\",\"1.2769\",\"1.277\",\"1.2769\",\"1.2769\",\"1.2768\",\"1.2769\",\"1.2769\",\"1.277\",\"1.277\",\"1.2769\",\"1.2769\",\"1.2767\",\"1.2767\",\"1.2767\",\"1.2766\",\"1.2767\",\"1.2768\",\"1.2767\",\"1.2767\",\"1.2767\",\"1.2767\",\"1.2768\",\"1.2766\",\"1.2765\",\"1.2766\",\"1.2765\",\"1.2764\"],\n\"volume\": [\"8\",\"15\",\"8\",\"10\",\"17\",\"28\",\"9\",\"4\",\"12\",\"11\",\"15\",\"17\",\"9\",\"21\",\"15\",\"22\",\"24\",\"19\",\"20\",\"18\",\"28\",\"21\",\"6\",\"11\",\"3\",\"4\",\"5\",\"13\",\"7\",\"5\",\"3\",\"10\",\"8\",\"7\",\"10\",\"3\",\"2\",\"7\",\"7\",\"5\",\"1\",\"3\",\"12\",\"12\",\"10\",\"4\",\"2\",\"5\",\"3\",\"2\",\"6\",\"14\",\"4\",\"1\",\"1\",\"2\",\"4\",\"6\",\"6\",\"20\",\"12\",\"4\",\"1\",\"3\",\"5\",\"3\",\"5\",\"3\",\"2\",\"5\",\"3\",\"2\",\"8\",\"11\",\"11\",\"1\",\"7\",\"2\",\"1\",\"6\",\"1\",\"6\",\"8\",\"2\",\"6\",\"10\",\"7\",\"3\",\"4\",\"3\",\"4\",\"2\",\"2\",\"2\",\"1\",\"1\",\"4\",\"5\",\"3\",\"6\",\"2\",\"9\",\"2\",\"2\",\"3\",\"5\",\"9\",\"3\",\"10\",\"5\",\"1\",\"2\",\"2\",\"3\",\"4\",\"6\",\"4\",\"5\",\"6\",\"11\",\"14\",\"5\",\"8\",\"4\",\"4\",\"4\",\"5\",\"16\",\"4\",\"1\",\"5\",\"3\",\"3\",\"1\",\"1\",\"3\",\"6\",\"2\",\"3\",\"10\",\"1\",\"2\",\"2\",\"2\",\"2\",\"1\",\"6\",\"4\",\"3\",\"3\",\"2\",\"4\",\"5\",\"2\",\"2\",\"4\",\"3\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"8\",\"3\",\"1\",\"1\",\"3\",\"9\",\"2\",\"2\",\"1\",\"1\",\"5\",\"3\",\"3\",\"3\",\"7\",\"6\",\"5\",\"7\",\"2\",\"4\",\"7\",\"6\",\"5\",\"14\",\"21\",\"7\",\"6\",\"10\",\"6\",\"22\",\"26\",\"41\",\"7\",\"5\",\"12\",\"8\",\"8\",\"5\",\"4\",\"6\",\"3\",\"9\",\"5\",\"5\",\"7\",\"6\",\"3\",\"2\",\"6\",\"8\",\"7\",\"9\",\"11\",\"4\",\"3\",\"8\",\"3\",\"4\",\"2\",\"1\",\"8\",\"5\",\"2\",\"1\",\"3\",\"10\",\"5\",\"6\",\"7\",\"10\",\"2\",\"8\",\"4\",\"5\",\"1\",\"6\",\"5\",\"8\",\"4\",\"2\",\"7\",\"4\",\"2\",\"7\",\"1\",\"8\",\"3\"]\n}";
//char message[] = "{ \"size\":\"3\", \"identifiers\": [\"1\",\"6\",\"7\"] }";
//char message[] = "{ \"fitness\":\"0.2\" }";
//char message[] = "{ \"neuronsAmount\":\"10\" }";
//char message[] = "{ \"size\":\"1\", \"symbol\":\"EURUSD\", \"period\":\"1\", \"fitness\":\"0.2\", \"numberOfNeurons\":\"10\", \"flags\": [\"1\",\"2\",\"3\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], \"weights\": [ [\"1.4\",\"1.5\",\"1.6\",\"0\",\"0\",\"0\",\"0\",\"1.11\",\"1.12\",\"1.13\"], [\"2.4\",\"2.5\",\"2.6\",\"0\",\"0\",\"0\",\"0\",\"2.11\",\"2.12\",\"2.13\"], [\"3.4\",\"3.5\",\"3.6\",\"0\",\"0\",\"0\",\"0\",\"3.11\",\"3.12\",\"3.13\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"10.11\",\"10.12\",\"10.13\"] ], \"activities\": [ [\"0.7\",\"0.8\",\"0.9\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"], [\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"11.11\",\"11.12\",\"11.13\"] ] }";
//char message[] = "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"age\": 25,\n    \"address\": {\n        \"streetAddress\": \"21 2nd Street\",\n        \"city\": \"New York\",\n        \"state\": \"NY\",\n        \"postalCode\": 10021\n    },\n    \"phoneNumbers\": [\n        {\n            \"type\": \"home\",\n            \"number\": \"212 555-1234\"\n        },\n        {\n            \"type\": \"fax\",\n            \"number\": \"646 555-4567\"\n        }\n    ]\n}\n";

void parseJsonLoadTrainingSet(const JSONNode &node, const bool initialCall=false) {
	static string array = "";
	static int timeCounter = 0;
	static int openCounter = 0;
	static int lowCounter = 0;
	static int highCounter = 0;
	static int closeCounter = 0;
	static int volumeCounter = 0;

	for(JSONNode::const_iterator i = node.begin(); i!=node.end(); ++i){
		std::string node_name = i -> name();

		/*
		 * Store values into proper object filds.
		 */
		if (node_name == "numberOfExamples"){
			std::cout << i->as_int();
			std::cout << endl;
		} else if (node_name == "time") {
			array = "time";
		} else if (node_name == "open") {
			array = "open";
		} else if (node_name == "low") {
			array = "low";
		} else if (node_name == "high") {
			array = "high";
		} else if (node_name == "close") {
			array = "close";
		} else if (node_name == "volume") {
			array = "volume";
		} else if (array == "time") {
			std::cout << array << "\t" << i->as_int();
			std::cout << endl;
			timeCounter++;
		} else if (array == "open") {
			std::cout << array << "\t" << i->as_float();
			std::cout << endl;
			openCounter++;
		} else if (array == "low") {
			std::cout << array << "\t" << i->as_float();
			std::cout << endl;
			lowCounter++;
		} else if (array == "high") {
			std::cout << array << "\t" << i->as_float();
			std::cout << endl;
			highCounter++;
		} else if (array == "close") {
			std::cout << array << "\t" << i->as_float();
			std::cout << endl;
			closeCounter++;
		} else if (array == "volume") {
			std::cout << array << "\t" << i->as_int();
			std::cout << endl;
			volumeCounter++;
		}

		/*
		 * Recursively call ourselves to dig deeper into the tree.
		 */
		if (i -> type() == JSON_ARRAY || i -> type() == JSON_NODE){
			parseJsonLoadTrainingSet(*i);
		}
	}
}

void parseJsonLoadAnnList(const JSONNode &node, const bool initialCall=false) {
	static int size = 0;
	static int identifiersCounter = 0;
	static string array = "";
	if(initialCall == true) {
		size = 0;
		identifiersCounter = 0;
		array = "";
	}

	for(JSONNode::const_iterator i = node.begin(); i!=node.end(); ++i){
		std::string node_name = i -> name();

		/*
		 * Store values into proper object filds.
		 */
		if (node_name == "size"){
			size = i->as_int();
			std::cout << i->as_int();
			std::cout << endl;
		} else if (node_name == "identifiers") {
			array = "identifiers";
		} else if (array == "identifiers") {
			std::cout << array << "\t" << i->as_int();
			std::cout << endl;
			identifiersCounter++;
		}

		/*
		 * Recursively call ourselves to dig deeper into the tree.
		 */
		if (i -> type() == JSON_ARRAY || i -> type() == JSON_NODE){
			parseJsonLoadAnnList(*i);
		}
	}
}

void parseJsonLoadRemoteBestFitness(const JSONNode &node, const bool initialCall=false) {
	for(JSONNode::const_iterator i = node.begin(); i!=node.end(); ++i){
		std::string node_name = i -> name();

		/*
		 * Store values into proper object filds.
		 */
		if (node_name == "fitness"){
			std::cout << i->as_float();
			std::cout << endl;
		}

		/*
		 * Recursively call ourselves to dig deeper into the tree.
		 */
		if (i -> type() == JSON_ARRAY || i -> type() == JSON_NODE){
			parseJsonLoadRemoteBestFitness(*i);
		}
	}
}

void parseJsonLoadAnnNeuronsAmount(const JSONNode &node, const bool initialCall=false) {
	for(JSONNode::const_iterator i = node.begin(); i!=node.end(); ++i){
		std::string node_name = i -> name();

		/*
		 * Store values into proper object filds.
		 */
		if (node_name == "neuronsAmount"){
			std::cout << i->as_int();
			std::cout << endl;
		}

		/*
		 * Recursively call ourselves to dig deeper into the tree.
		 */
		if (i -> type() == JSON_ARRAY || i -> type() == JSON_NODE){
			parseJsonLoadAnnNeuronsAmount(*i);
		}
	}
}

void parseJsonLoadSingleANN(const JSONNode &node, const bool initialCall=false) {
	static int size = 0;
	static int numberOfNeurons = 0;
	static int flagsCounter = 0;
	static int weightsCounter = 0;
	static int activitiesCounter = 0;
	static string array = "";
	if(initialCall == true) {
		size = 0;
		numberOfNeurons = 0;
		flagsCounter = 0;
		weightsCounter = 0;
		activitiesCounter = 0;
		array = "";
	}

	for(JSONNode::const_iterator i = node.begin(); i!=node.end(); ++i){
		std::string node_name = i -> name();

		/*
		 * Store values into proper object filds.
		 */
		if (node_name == "size"){
			size = i->as_int();
			std::cout << i->as_int();
			std::cout << endl;
		} else if (node_name == "symbol"){
			std::cout << i->as_string();
			std::cout << endl;
		} else if (node_name == "period") {
			std::cout << i->as_int();
			std::cout << endl;
		} else if (node_name == "fitness") {
			std::cout << i->as_float();
			std::cout << endl;
		} else if (node_name == "numberOfNeurons") {
			numberOfNeurons = i->as_int();
			std::cout << i->as_int();
			std::cout << endl;
		} else if (node_name == "flags") {
			array = "flags";
		} else if (node_name == "weights") {
			array = "weights";
		} else if (node_name == "activities") {
			array = "activities";
		} else if (array == "flags") {
			std::cout << array << "\t" << i->as_int();
			std::cout << endl;
			flagsCounter++;
			//TODO After reading all numbers array value should be empty string.
		} else if (array == "weights") {
			//TODO There is a problem with extra reading of one more zero.
			if((weightsCounter%(numberOfNeurons+1)) != 0) {
				std::cout << array << "\t" << i->as_float();
				std::cout << endl;
			}
			weightsCounter++;
			//TODO After reading all numbers array value should be empty string.
		} else if (array == "activities") {
			//TODO There is a problem with extra reading of one more zero.
			if((activitiesCounter%(numberOfNeurons+1)) != 0) {
				std::cout << array << "\t" << i->as_float();
				std::cout << endl;
			}
			activitiesCounter++;
			//TODO After reading all numbers array value should be empty string.
		}

		/*
		 * Recursively call ourselves to dig deeper into the tree.
		 */
		if (i -> type() == JSON_ARRAY || i -> type() == JSON_NODE){
			parseJsonLoadSingleANN(*i);
		}
	}
}

void SimpleTestParseJSON(const JSONNode &node){
	for(JSONNode::const_iterator i = node.begin(); i!=node.end(); ++i){
		// recursively call ourselves to dig deeper into the tree
		if (i -> type() == JSON_ARRAY || i -> type() == JSON_NODE){
			SimpleTestParseJSON(*i);
		}

		// get the node name and value as a string
		std::string node_name = i -> name();

		cout << i->as_string();
		cout << endl;

		// find out where to store the values
		if (node_name == "age"){
			cout << i->as_int();
			cout << endl;
		} else if (node_name == "lastName"){
			cout << i->as_string();
			cout << endl;
		} else if (node_name == "firstName") {
			cout << i->as_string();
			cout << endl;
		}
	}
}

int main(int argc, char *argv[]){
	cout << message;
	cout << endl;
	cout << endl;
	cout << "---------------------";
	cout << endl;
	cout << endl;

	JSONNode node = libjson::parse(message);

	//SimpleTestParseJSON(node);

	parseJsonLoadTrainingSet(node, true);
	//parseJsonLoadAnnList(node, true);
	//parseJsonLoadRemoteBestFitness(node, true);
	//parseJsonLoadAnnNeuronsAmount(node, true);
	//parseJsonLoadSingleANN(node, true);

    system("PAUSE");
    return EXIT_SUCCESS;
}
