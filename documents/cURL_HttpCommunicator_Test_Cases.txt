#include <cstdio>
#include <vector>
#include <iostream>

#include "curl/curl.h"

#pragma pack(push,1)

struct RateInfo {

	/**
	 * Rate time value.
	 */
	unsigned int time;

	/**
	 * Rate open value.
	 */
	double open;

	/**
	 * Rate low value.
	 */
	double low;

	/**
	 * Rate high value.
	 */
	double high;

	/**
	 * Rate close value.
	 */
	double close;

	/**
	 * Rate volume value.
	 */
	double volume;
};

#pragma pack(pop)

enum NeuronType {
	/**
	 * Regular neuron flag.
	 */
	REGULAR = 0x00,

	/**
	 * Bias neuron flag.
	 */
	BIAS = 0x01,

	/**
	 * Input neuron flag.
	 */
	INPUT = 0x02,

	/**
	 * Input and bias neuron flag.
	 */
	INPUT_BIAS = 0x03,

	/**
	 * Output neuron flag.
	 */
	OUTPUT = 0x04,

	/**
	 * Output and bias neuron flag.
	 */
	OUTPUT_BIAS = 0x05,

	/**
	 * Output and input neuron flag.
	 */
	OUTPUT_INPUT = 0x06,

	/**
	 * Output, input and bias neuron flag.
	 */
	OUTPUT_INPUT_BIAS = 0x07
};

enum TimePeriod {

	/**
	 * No time period at all.
	 */
	NO = 0,

	/**
	 * One minute.
	 */
	M1 = 1,

	/**
	 * Five minutes.
	 */
	M5 = 5,

	/**
	 * Fifteen minutes.
	 */
	M15 = 15,

	/**
	 * Thirty minutes.
	 */
	M30 = 30,

	/**
	 * One hour.
	 */
	H1 = 60,

	/**
	 * Four hours.
	 */
	H4 = 240,

	/**
	 * One day.
	 */
	D1 = 1440,

	/**
	 * One week.
	 */
	W1 = 10080,

	/**
	 * One month.
	 */
	MN1 = 43200
};

using namespace std;

char buffer[10000];

const int HTTP_PARAMETERS_BUFFER_SIZE = 10000;

const char HOST[] = "localhost";

const char LIST_OF_ANNS_SCRIPT[] = "/logic/number_of_anns.php";

const char SAVE_SINGLE_ANN_SCRIPT[] = "/logic/save_ann.php";

const char LOAD_NEURONS_AMOUNT_SCRIPT[] = "/logic/load_neurons_amount.php";

const char LOAD_SINGLE_ANN_SCRIPT[] = "/logic/load_ann.php";

const char LOAD_BEST_FITNESS_SCRIPT[] = "/logic/load_best_fitness.php";

const char TRAINING_SET_SIZE_SCRIPT[] = "/logic/training_set_size.php";

const char SAVE_TRAINING_SET_SCRIPT[] = "/logic/save_training_set.php";

const char LOAD_TRAINING_SET_SCRIPT[] = "/logic/load_training_set.php";

struct MemoryStruct {
	char *memory;
	size_t size;
};

static size_t WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp) {
	size_t realsize = size * nmemb;
	struct MemoryStruct *mem = (struct MemoryStruct *)userp;

	mem->memory = (char*)realloc(mem->memory, mem->size + realsize + 1);
	if(mem->memory == NULL) {
		return 0;
	}

	memcpy(&(mem->memory[mem->size]), contents, realsize);
	mem->size += realsize;
	mem->memory[mem->size] = 0;

	return realsize;
}

const char* HttpRequestResponse(char *response, const char* fields, const char* host, const char* script) {
	CURL *curl;
	CURLcode result;

	struct MemoryStruct chunk;
	chunk.memory = (char*)malloc(1);
	chunk.size = 0;

	curl_global_init(CURL_GLOBAL_ALL);

	curl = curl_easy_init();

	if(curl == NULL) {
		throw( "HttpCommunicator00212" );
	}

	sprintf(buffer, "http://%s%s", host, script);
	curl_easy_setopt(curl, CURLOPT_URL, buffer);
	curl_easy_setopt(curl, CURLOPT_POST, 1);
	curl_easy_setopt(curl, CURLOPT_POSTFIELDS, fields);
	curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, strlen(fields));

	curl_easy_setopt(curl, CURLOPT_NOPROGRESS, 1L);
	curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);

	curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)(&chunk));
	curl_easy_setopt(curl, CURLOPT_USERAGENT, "libcurl-agent/1.0");

 	result = curl_easy_perform(curl);

	if(result != CURLE_OK) {
		throw( "HttpCommunicator00213" );
	}

	curl_easy_cleanup(curl);

	memcpy(response, chunk.memory, sizeof(char)*(chunk.size+1));

	if(chunk.memory) {
		free(chunk.memory);
	}

	curl_global_cleanup();

	return(response);
}

void loadAnnList(vector<int> &list, int annId, char symbol[], TimePeriod period) {
	char parameters[ HTTP_PARAMETERS_BUFFER_SIZE ];
	char *position = parameters;

	sprintf(position, "annid=%d&", annId);
	position += strlen(position);

	sprintf(position, "symbol=%s&", symbol);
	position += strlen(position);

	sprintf(position, "period=%d", period);
	position += strlen(position);

	HttpRequestResponse(buffer, parameters, HOST, LIST_OF_ANNS_SCRIPT);
	position = buffer;
	while(position[0]=='\r' || position[0]=='\n') position++;

	int numberOfIds = 0;
	// TODO May be command should be like this: sscanf(position, "\n\n%d", &numberOfIds);
	sscanf(position, "%d", &numberOfIds);

	/*
	 * Parse list values and limit it to the size of output array.
	 */
	int i = 0;
	int value = 0;
	for (i=0; i<numberOfIds; i++) {
		position = strstr(position, "\n");
		while(position[0]=='\r' || position[0]=='\n') position++;
		sscanf(position, "%d", &value);
		list.push_back( value );
	}

	/*
	 * Resize list if there are less available ANNs.
	 */
	if(i < list.size()) {
		list.resize( i );
	}
}

int loadAnnNeuronsAmount(int annId) {
	char parameters[ HTTP_PARAMETERS_BUFFER_SIZE ];
	sprintf(parameters, "annid=%d", annId);

	HttpRequestResponse(buffer, parameters, HOST, LOAD_NEURONS_AMOUNT_SCRIPT);

	/*
	 * Parse result.
	 */
	int amout = 0;
	char *position = buffer;
	// TODO May be command should be like this: sscanf(position, "\n\n%d", &result);
	sscanf(position, "%d", &amout);

	return (amout);
}

void saveSingleANN(char *symbol, TimePeriod period, double fitness, int neurons[10], double weights[10][10], double activities[10][10]) {
	char number[ 100 ];
	char parameters[ HTTP_PARAMETERS_BUFFER_SIZE ] = "";
	char *position = parameters;

	sprintf(position, "symbol=%s&", symbol);
	position += strlen(position);

	sprintf(position, "period=%d&", period);
	position += strlen(position);

	sprintf(position, "fitness=%lf&", fitness);
	position += strlen(position);

	sprintf(position, "number_of_neurons=%d&", 10);
	position += strlen(position);

	strcpy(buffer, "");
	for (int i=0; i<10; i++) {
		if (i > 0) {
			strcat(buffer, " ");
		}
		sprintf(number, "%d", neurons[i]);
		strcat(buffer, number);
	}
	sprintf(position, "flags=%s&", buffer);
	position += strlen(position);

	strcpy(buffer, "");
	for (int j=0; j<10; j++) {
		if (j > 0) {
			strcat(buffer, "\n");
		}
		for (int i=0; i<10; i++) {
			if (i > 0) {
				strcat(buffer, " ");
			}
			sprintf(number, "%lf", weights[i][j]);
			strcat(buffer, number);
		}
	}
	sprintf(position, "weights=%s&", buffer);
	position += strlen(position);

	strcpy(buffer, "");
	for (int j=0; j<10; j++) {
		if (j > 0) {
			strcat(buffer, "\n");
		}
		for (int i=0; i<10; i++) {
			if (i > 0) {
				strcat(buffer, " ");
			}
			sprintf(number, "%lf", activities[i][j]);
			strcat(buffer, number);
		}
	}
	sprintf(position, "activities=%s", buffer);
	position += strlen(position);

	HttpRequestResponse(buffer, parameters, HOST, SAVE_SINGLE_ANN_SCRIPT);
}

void loadSingleANN(int annId, char *symbol, TimePeriod &period, double &fitness, int neurons[10], double weights[10][10], double activities[10][10]) {
	char parameters[ HTTP_PARAMETERS_BUFFER_SIZE ] = "";
	sprintf(parameters, "annid=%d", annId);

	HttpRequestResponse(buffer, parameters, HOST, LOAD_SINGLE_ANN_SCRIPT);

	char *position = buffer;
	while(position[0]=='\r' || position[0]=='\n') position++;

	int available = 0;
	sscanf(position, "%d", &available);

	if (available != 0) {
		position = strstr(position, "\n");
		while(position[0]=='\r' || position[0]=='\n') position++;
		strcpy(symbol, "");
		sscanf(position, "%s", symbol);

		position = strstr(position, "\n");
		while(position[0]=='\r' || position[0]=='\n') position++;
		period = NO;
		sscanf(position, "%d", &period);

		position = strstr(position, "\n");
		while(position[0]=='\r' || position[0]=='\n') position++;
		fitness = (double)RAND_MAX;
		sscanf(position, "%lf", &fitness);

		int numberOfNeurons = 0;
		position = strstr(position, "\n");
		while(position[0]=='\r' || position[0]=='\n') position++;
		sscanf(position, "%d", &numberOfNeurons);

		int intValue = 0;
		position = strstr(position, "\n");
		while(position[0]=='\r' || position[0]=='\n') position++;
		for (int i=0; i<numberOfNeurons; i++) {
			intValue = 0;
			sscanf(position, "%d", &intValue);
			switch (intValue) {
			case REGULAR:
				neurons[i] = REGULAR;
				break;
			case BIAS:
				neurons[i] = BIAS;
				break;
			case INPUT:
				neurons[i] = INPUT;
				break;
			case INPUT_BIAS:
				neurons[i] = INPUT_BIAS;
				break;
			case OUTPUT:
				neurons[i] =  OUTPUT;
				break;
			case OUTPUT_BIAS:
				neurons[i] =  OUTPUT_BIAS;
				break;
			case OUTPUT_INPUT:
				neurons[i] =  OUTPUT_INPUT;
				break;
			case OUTPUT_INPUT_BIAS:
				neurons[i] =  OUTPUT_INPUT_BIAS;
				break;
			default:
				neurons[i] =  REGULAR;
				break;
			}

			if(i < (numberOfNeurons-1)) {
				position = strstr(position, " ")+1;
			}
		}

		double doubleValue = 0.0;
		position = strstr(position, "\n");
		while(position[0]=='\r' || position[0]=='\n') position++;
		for (int j=0; j<numberOfNeurons; j++) {
			for (int i=0; i<numberOfNeurons; i++) {
				doubleValue = 0.0;
				sscanf(position, "%lf", &doubleValue);
				weights[i][j] = doubleValue;

				if(i < (numberOfNeurons-1)) {
					position = strstr(position, " ")+1;
				} else {
					position = strstr(position, "\n");
				}
			}
		}

		while(position[0]=='\r' || position[0]=='\n') position++;
		for (int j=0; j<numberOfNeurons; j++) {
			for (int i=0; i<numberOfNeurons; i++) {
				doubleValue = 0.0;
				sscanf(position, "%lf", &doubleValue);
				activities[i][j] = doubleValue;

				if(i < (numberOfNeurons-1)) {
					position = strstr(position, " ")+1;
				} else {
					position = strstr(position, "\n");
				}
			}
		}
	}

	if (available == 0) {
		throw( "HttpCommunicator00066" );
	}
}

int loadTrainingSetSize(char *symbol, TimePeriod period) {
	char parameters[ HTTP_PARAMETERS_BUFFER_SIZE ] = "";
	sprintf(parameters, "symbol=%s&period=%d", symbol, period);

	HttpRequestResponse(buffer, parameters, HOST, TRAINING_SET_SIZE_SCRIPT);

	/*
	 * Parse result.
	 */
	int size = 0;
	char *position = buffer;
	sscanf(position, "%d", &size);

	return( size );
}

void saveTrainingSet(char symbol[], TimePeriod period, const vector<RateInfo> &rates, int size) {
	char number[ 100 ];
	char parameters[ HTTP_PARAMETERS_BUFFER_SIZE ] = "";
	char *position = parameters;

	sprintf(position, "symbol=%s&", symbol);
	position += strlen(position);

	sprintf(position, "period=%d&", period);
	position += strlen(position);

	sprintf(position, "number_of_examples=%d&", size);
	position += strlen(position);

	strcpy(buffer, "");
	for (int i=0; i<size; i++) {
		if (i > 0) {
			strcat(buffer, " ");
		}
		sprintf(number, "%d", rates[i].time);
		strcat(buffer, number);
	}
	sprintf(position, "time=%s&", buffer);
	position += strlen(position);

	strcpy(buffer, "");
	for (int i=0; i<size; i++) {
		if (i > 0) {
			strcat(buffer, " ");
		}
		sprintf(number, "%lf", rates[i].open);
		strcat(buffer, number);
	}
	sprintf(position, "open=%s&", buffer);
	position += strlen(position);

	strcpy(buffer, "");
	for (int i=0; i<size; i++) {
		if (i > 0) {
			strcat(buffer, " ");
		}
		sprintf(number, "%lf", rates[i].low);
		strcat(buffer, number);
	}
	sprintf(position, "low=%s&", buffer);
	position += strlen(position);

	strcpy(buffer, "");
	for (int i=0; i<size; i++) {
		if (i > 0) {
			strcat(buffer, " ");
		}
		sprintf(number, "%lf", rates[i].high);
		strcat(buffer, number);
	}
	sprintf(position, "high=%s&", buffer);
	position += strlen(position);

	strcpy(buffer, "");
	for (int i=0; i<size; i++) {
		if (i > 0) {
			strcat(buffer, " ");
		}
		sprintf(number, "%lf", rates[i].close);
		strcat(buffer, number);
	}
	sprintf(position, "close=%s&", buffer);
	position += strlen(position);

	strcpy(buffer, "");
	for (int i=0; i<size; i++) {
		if (i > 0) {
			strcat(buffer, " ");
		}
		sprintf(number, "%lf", rates[i].volume);
		strcat(buffer, number);
	}
	sprintf(position, "volume=%s", buffer);
	position += strlen(position);

	HttpRequestResponse(buffer, parameters, HOST, SAVE_TRAINING_SET_SCRIPT);
}

void loadTrainingSet(char symbol[], TimePeriod period, vector<RateInfo> &rates, int size) {
	char parameters[ HTTP_PARAMETERS_BUFFER_SIZE ] = "";
	sprintf(parameters, "symbol=%s&period=%d", symbol, period);

	HttpRequestResponse(buffer, parameters, HOST, LOAD_TRAINING_SET_SCRIPT);

	char *position = buffer;
	while(position[0]=='\r' || position[0]=='\n') position++;

	int available = 0;
	sscanf(position, "%d", &available);

	/*
	 * No parsing is needed if there is no data in database.
	 */
	if (available == 0) {
		return;
	}

	if (available < size) {
		size = available;

		rates.resize(size);
	}

	int intValue = 0;
	position = strstr(position, "\n");
	while(position[0]=='\r' || position[0]=='\n') position++;
	for (int i=0; i<size; i++) {
		intValue = 0;
		sscanf(position, "%d", &intValue);
		rates[i].time = intValue;

		if(i < (size-1)) {
			position = strstr(position, " ")+1;
		} else {
			position = strstr(position, "\n");
		}
	}

	double doubleValue = 0.0;
	position = strstr(position, "\n");
	while(position[0]=='\r' || position[0]=='\n') position++;
	for (int i=0; i<size; i++) {
		doubleValue = 0.0;
		sscanf(position, "%lf", &doubleValue);
		rates[i].open = doubleValue;

		if(i < (size-1)) {
			position = strstr(position, " ")+1;
		} else {
			position = strstr(position, "\n");
		}
	}

	position = strstr(position, "\n");
	while(position[0]=='\r' || position[0]=='\n') position++;
	for (int i=0; i<size; i++) {
		doubleValue = 0.0;
		sscanf(position, "%lf", &doubleValue);
		rates[i].low = doubleValue;

		if(i < (size-1)) {
			position = strstr(position, " ")+1;
		} else {
			position = strstr(position, "\n");
		}
	}

	position = strstr(position, "\n");
	while(position[0]=='\r' || position[0]=='\n') position++;
	for (int i=0; i<size; i++) {
		doubleValue = 0.0;
		sscanf(position, "%lf", &doubleValue);
		rates[i].high = doubleValue;

		if(i < (size-1)) {
			position = strstr(position, " ")+1;
		} else {
			position = strstr(position, "\n");
		}
	}

	position = strstr(position, "\n");
	while(position[0]=='\r' || position[0]=='\n') position++;
	for (int i=0; i<size; i++) {
		doubleValue = 0.0;
		sscanf(position, "%lf", &doubleValue);
		rates[i].close = doubleValue;

		if(i < (size-1)) {
			position = strstr(position, " ")+1;
		} else {
			position = strstr(position, "\n");
		}
	}

	position = strstr(position, "\n");
	while(position[0]=='\r' || position[0]=='\n') position++;
	for (int i=0; i<size; i++) {
		doubleValue = 0.0;
		sscanf(position, "%lf", &doubleValue);
		rates[i].volume = doubleValue;

		if(i < (size-1)) {
			position = strstr(position, " ")+1;
		} else {
			position = strstr(position, "\n");
		}
	}
}

double loadRemoteBestFitness(char *symbol, TimePeriod period, int neurons[], double activities[10][10]) {
	char number[ 100 ];
	char parameters[ HTTP_PARAMETERS_BUFFER_SIZE ] = "";
	char *position = parameters;

	sprintf(position, "symbol=%s&", symbol);
	position += strlen(position);

	sprintf(position, "period=%d&", period);
	position += strlen(position);

	sprintf(position, "number_of_neurons=%d&", 10);
	position += strlen(position);

	strcpy(buffer, "");
	for (int i=0; i<10; i++) {
		if (i > 0) {
			strcat(buffer, " ");
		}
		sprintf(number, "%d", neurons[i]);
		strcat(buffer, number);
	}
	sprintf(position, "flags=%s&", buffer);
	position += strlen(position);

	strcpy(buffer, "");
	for (int j=0; j<10; j++) {
		if (j > 0) {
			strcat(buffer, "\n");
		}
		for (int i=0; i<10; i++) {
			if (i > 0) {
				strcat(buffer, " ");
			}
			sprintf(number, "%lf", activities[i][j]);
			strcat(buffer, number);
		}
	}
	sprintf(position, "activities=%s", buffer);
	position += strlen(position);
	strcpy(buffer, "");

	HttpRequestResponse(buffer, parameters, HOST, LOAD_BEST_FITNESS_SCRIPT);

	position = buffer;
	double bestFitness = (double)RAND_MAX;
	sscanf(position, "%lf", &bestFitness);

	return( bestFitness );
}

int main(void)
{
	/*
	vector<int> list;
	loadAnnList(list, 1, "EURUSD", M1);
	for(int i=0; i<list.size();i++){
		cout << list [i];
	}
	cout << loadAnnNeuronsAmount(1);
	/**/

	/*
	int neurons[10] = {0, 1,2,3,4,5,6,7,0,1};
	double weights[10][10] = {
		{1,2,3,4,5,6,7,8,9,10},
		{11,12,13,14,15,16,17,18,19,20},
		{21,22,23,24,25,26,27,28,29,30},
		{31,32,33,34,35,36,37,38,39,40},
		{41,42,43,44,45,46,47,48,49,50},
		{51,52,53,54,55,56,57,58,59,60},
		{61,62,63,64,65,66,67,68,69,70},
		{71,72,73,74,75,76,77,78,79,80},
		{81,82,83,84,85,86,87,88,89,90},
		{91,92,93,94,95,96,97,98,99,100},
	};
	double activities[10][10] = {
		{100,200,300,400,500,600,700,800,900,1000},
		{1100,1200,1300,1400,1500,1600,1700,1800,1900,2000},
		{2100,2200,2300,2400,2500,2600,2700,2800,2900,3000},
		{3100,3200,3300,3400,3500,3600,3700,3800,3900,4000},
		{4100,4200,4300,4400,4500,4600,4700,4800,4900,5000},
		{5100,5200,5300,5400,5500,5600,5700,5800,5900,6000},
		{6100,6200,6300,6400,6500,6600,6700,6800,6900,7000},
		{7100,7200,7300,7400,7500,7600,7700,7800,7900,8000},
		{8100,8200,8300,8400,8500,8600,8700,8800,8900,9000},
		{9100,9200,9300,9400,9500,9600,9700,9800,9900,10000},
	};
	/**/
	//PHP error_log("".$symbol."\r\n\r\n", 3, '24jul2013log.txt');
	//saveSingleANN("EURUSD", M1, 0.8, neurons, weights, activities);

	/*
	char symbol[100] = "";
	double fitness = 0.0;
	TimePeriod period = NO;
	int neurons[10] = {0,0,0,0,0,0,0,0,0,0};
	double weights[10][10] = {
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
	};
	double activities[10][10] = {
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
	};
	loadSingleANN(2, symbol, period, fitness, neurons, weights, activities);
	cout << symbol << endl;
	cout << period << endl;
	cout << fitness << endl;
	cout << endl;
	for(int i=0; i<10; i++) {
		cout << neurons[i] << " ";
	}
	cout << endl;
	cout << endl;
	for(int j=0; j<10; j++) {
		for(int i=0; i<10; i++) {
			cout << weights[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;
	for(int j=0; j<10; j++) {
		for(int i=0; i<10; i++) {
			cout << activities[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;
	/**/

	/*
	cout << loadTrainingSetSize("EURUSD", M1) << endl;
	/**/

	/*
	vector<RateInfo> rates;
	RateInfo values[] = {
		{1, 1, 1, 1, 1, 1},
		{2, 2, 2, 2, 2, 2},
		{3, 3, 3, 3, 3, 3},
		{4, 4, 4, 4, 4, 4},
		{5, 5, 5, 5, 5, 5},
	};
	rates.push_back( values[0] );
	rates.push_back( values[1] );
	rates.push_back( values[2] );
	rates.push_back( values[3] );
	rates.push_back( values[4] );
	saveTrainingSet("EURUSD", M5, rates, rates.size());
	/**/

	/*
	vector<RateInfo> rates;
	RateInfo values[] = {
		{0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0},
	};
	rates.push_back( values[0] );
	rates.push_back( values[1] );
	rates.push_back( values[2] );
	rates.push_back( values[3] );
	rates.push_back( values[4] );
	loadTrainingSet("EURUSD", M5, rates, rates.size());
	cout << rates.size() << endl;
	for(int i=0; i<rates.size(); i++) {
		cout << rates[i].time << " ";
		cout << rates[i].low << " ";
		cout << rates[i].high << " ";
		cout << rates[i].open << " ";
		cout << rates[i].close << " ";
		cout << rates[i].volume << " ";
		cout << endl;
	}
	/**/

	/*
	int neurons[] = {0, 1, 2, 3, 4, 5, 6, 7, 0, 1};
	double activities[10][10] = {
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	};
	cout << loadRemoteBestFitness("EURUSD", M1, neurons, activities) << endl;
	/**/

	system( "PAUSE" );
	return 0;
}

